import requests

def fetch_and_display_users(api_url):
    """
    Consumes a public REST API, fetches user data, and prints key details.

    Args:
        api_url (str): The URL of the REST API endpoint to consume.
    """
    print(f"--- Fetching data from: {api_url} ---\n")

    try:
        # 1. Make the GET request to the API
        response = requests.get(api_url)

        # 2. Check for successful response (status code 200)
        # requests.raise_for_status() will raise an exception for bad status codes (4xx or 5xx)
        response.raise_for_status()

        # 3. Parse the JSON data from the response body
        data = response.json()

        # Check if the data is a list (as expected from this API endpoint)
        if isinstance(data, list):
            print(f"Successfully retrieved {len(data)} user records.")
            print("-" * 40)
            
            # 4. Iterate over the results and display key information
            for user in data:
                print(f"ID: {user.get('id', 'N/A')}")
                print(f"Name: {user.get('name', 'N/A')}")
                print(f"Username: {user.get('username', 'N/A')}")
                print(f"Email: {user.get('email', 'N/A')}")
                
                # Safely access nested address data
                address = user.get('address', {})
                city = address.get('city', 'N/A')
                print(f"City: {city}")
                
                print("-" * 40)
        else:
            print("Error: The API response was not in the expected list format.")

    except requests.exceptions.HTTPError as err_http:
        print(f"HTTP error occurred: {err_http}")  # e.g., 404 Not Found, 500 Server Error
    except requests.exceptions.ConnectionError as err_conn:
        print(f"Connection error occurred: {err_conn}") # e.g., DNS failure, refused connection
    except requests.exceptions.Timeout as err_timeout:
        print(f"Timeout error occurred: {err_timeout}")
    except requests.exceptions.RequestException as err:
        print(f"An unknown error occurred during the request: {err}")
    except ValueError:
        print("Error: Could not decode JSON response.")


if __name__ == "__main__":
    # URL for the JSONPlaceholder /users endpoint
    PUBLIC_API_URL = "https://jsonplaceholder.typicode.com/users"
    
    # Execute the function
    fetch_and_display_users(PUBLIC_API_URL)
